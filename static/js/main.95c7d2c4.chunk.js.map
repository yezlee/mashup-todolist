{"version":3,"sources":["TodoContext.js","components/TodoCreate.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoTemplate.js","App.js","reportWebVitals.js","index.js"],"names":["initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","children","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","CircleButton","styled","button","props","open","css","InsertFormPositioner","div","InsertForm","form","Input","input","TodoCreate","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","placeholder","autoFocus","onChange","target","onClick","React","memo","TodoHeadBlock","TodoHead","undoneTasks","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","className","length","CheckCircle","Text","Remove","TodoItemBlock","TodoItem","TodoListBlock","TodoList","todos","console","log","TodoTemplateBlock","TodoTemplate","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAEMA,EAAe,CACnB,CACEC,GAAI,EACJC,KAAM,aACNC,MAAM,GAER,CACEF,GAAI,EACJC,KAAM,+BACNC,MAAM,GAER,CACEF,GAAI,EACJC,KAAM,eACNC,MAAM,GAER,CACEF,GAAI,EACJC,KAAM,yBACNC,MAAM,IAQV,SAASC,EAAYC,EAAOC,GAG1B,OAAQA,EAAOC,MACb,IAAK,SACH,OAAOF,EAAMG,OAAOF,EAAOG,MAC7B,IAAK,SACH,OAAOJ,EAAMK,KAGX,SAACD,GAAD,OAAWA,EAAKR,KAAOK,EAAOL,GAAnB,2BAA6BQ,GAA7B,IAAmCN,MAAOM,EAAKN,OAASM,KAEvE,IAAK,SACH,OAAOJ,EAAMM,QAAO,SAACF,GAAD,OAAUA,EAAKR,KAAOK,EAAOL,MAEnD,QACE,MAAM,IAAIW,MAAJ,kCAAqCN,EAAOC,QAIxD,I,UAAMM,EAAmBC,0BACnBC,EAAsBD,0BACtBE,EAAoBF,0BAEnB,SAASG,EAAT,GAAqC,IAAbC,EAAY,EAAZA,SAC7B,EAA0BC,qBAAWf,EAAaJ,GAAlD,mBAAOK,EAAP,KAAce,EAAd,KACMC,EAASC,iBAAO,GAEtB,OACE,cAACT,EAAiBU,SAAlB,CAA2BC,MAAOnB,EAAlC,SACE,cAACU,EAAoBQ,SAArB,CAA8BC,MAAOJ,EAArC,SACE,cAACJ,EAAkBO,SAAnB,CAA4BC,MAAOH,EAAnC,SACGH,QAOJ,SAASO,IACd,IAAMC,EAAUC,qBAAWd,GAC3B,IAAKa,EACH,MAAM,IAAId,MAAM,4BAElB,OAAOc,EAGF,SAASE,IACd,IAAMF,EAAUC,qBAAWZ,GAC3B,IAAKW,EACH,MAAM,IAAId,MAAM,4BAElB,OAAOc,EC5ET,IAAMG,EAAeC,IAAOC,OAAV,spBAgCd,SAACC,GAAD,OACAA,EAAMC,MACNC,YADA,sOAaEC,EAAuBL,IAAOM,IAAV,6FAOpBC,EAAaP,IAAOQ,KAAV,0MASVC,EAAQT,IAAOU,MAAV,4VAUX,SAASC,IACP,MAAwBC,oBAAS,GAAjC,mBAAOT,EAAP,KAAaU,EAAb,KACA,EAA0BD,mBAAS,IAAnC,mBAAOlB,EAAP,KAAcoB,EAAd,KAKMxB,EAAWQ,IACXP,EDDD,WACL,IAAMK,EAAUC,qBAAWX,GAC3B,IAAKU,EACH,MAAM,IAAId,MAAM,4BAElB,OAAOc,ECJQmB,GAiBf,OACE,qCACGZ,GACC,cAACE,EAAD,UACE,cAACE,EAAD,CAAYS,SAnBH,SAACC,GAChBA,EAAEC,iBACF5B,EAAS,CACPb,KAAM,SACNE,KAAM,CACJR,GAAIoB,EAAO4B,QACX/C,KAAMsB,EACNrB,MAAM,KAGVyC,EAAS,IACTD,GAAQ,GACRtB,EAAO4B,SAAW,GAOZ,SACE,cAACV,EAAD,CACEW,YAAY,2CACZC,WAAS,EACTC,SA5BK,SAACL,GAAD,OAAOH,EAASG,EAAEM,OAAO7B,QA6B9BA,MAAOA,QAKf,cAACK,EAAD,CAAcyB,QAnCD,kBAAMX,GAASV,IAmCKA,KAAMA,EAAvC,SACE,cAAC,IAAD,SAMOsB,I,EAAAA,MAAMC,KAAKf,GCxHpBgB,EAAgB3B,IAAOM,IAAV,6aAmDJsB,I,YAAAA,EAxBf,WACE,IACMC,EADQlC,IACYd,QAAO,SAACF,GAAD,OAAWA,EAAKN,QAE3CyD,EAAQ,IAAIC,KACZC,EAAaF,EAAMG,mBAAmB,QAAS,CACnDC,KAAM,UACNC,MAAO,OACPC,IAAK,YAGDC,EAAUP,EAAMG,mBAAmB,QAAS,CAChDK,QAAS,SAGX,OACE,eAACX,EAAD,WACE,6BAAKK,IACL,qBAAKO,UAAU,MAAf,SAAsBF,IACtB,sBAAKE,UAAU,aAAf,UAA6BV,EAAYW,OAAzC,yBC5CAC,EAAczC,IAAOM,IAAV,gaAWb,SAACJ,GAAD,OACAA,EAAM7B,MACN+B,YADA,4FAOEsC,EAAO1C,IAAOM,IAAV,sFAIN,SAACJ,GAAD,OACAA,EAAM7B,MACN+B,YADA,0DAMEuC,EAAS3C,IAAOM,IAAV,mNAaNsC,EAAgB5C,IAAOM,IAAV,4YAObqC,GAON,SAASE,EAAT,GAAuC,IAAnB1E,EAAkB,EAAlBA,GAAIE,EAAc,EAAdA,KAAMD,EAAQ,EAARA,KACtBkB,EAAWQ,IAYjB,OACE,eAAC8C,EAAD,WACE,cAACH,EAAD,CAAapE,KAAMA,EAAMmD,QAbZ,kBACflC,EAAS,CACPb,KAAM,SACNN,QAUA,SACGE,GAAQ,cAAC,IAAD,MAEX,cAACqE,EAAD,CAAMrE,KAAMA,EAAZ,SAAmBD,IACnB,cAACuE,EAAD,CAAQnB,QAZK,kBACflC,EAAS,CACPb,KAAM,SACNN,QASA,SACE,cAAC,IAAD,SAMOsD,I,EAAAA,MAAMC,KAAKmB,GCpFpBC,EAAgB9C,IAAOM,IAAV,6GA+BJyC,I,EAAAA,EAxBf,WACE,IAAMC,EAAQrD,IAEd,OADAsD,QAAQC,IAAIF,GAEV,mCACE,cAACF,EAAD,UACGE,EAAMpE,KAAI,SAACD,GAAD,OACT,cAAC,EAAD,CAEER,GAAIQ,EAAKR,GACTC,KAAMO,EAAKP,KACXC,KAAMM,EAAKN,MAHNM,EAAKR,YCjBhBgF,EAAoBnD,IAAOM,IAAV,mSAyBR8C,I,EAAAA,EARf,YAAqC,IAAbhE,EAAY,EAAZA,SACtB,OACE,mCACE,cAAC+D,EAAD,UAAoB/D,OCfpBiE,GAAcC,YAAH,sEAmBFC,OAbf,WACE,OACE,eAACpE,EAAD,WACE,cAACkE,GAAD,IACA,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,WCROG,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.95c7d2c4.chunk.js","sourcesContent":["import { createContext, useContext, useReducer, useRef } from \"react\";\r\n\r\nconst initialTodos = [\r\n  {\r\n    id: 1,\r\n    text: \"Go jogging\",\r\n    done: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    text: \"Buy a birthday gift for Lucy\",\r\n    done: false,\r\n  },\r\n  {\r\n    id: 3,\r\n    text: \"Water plants\",\r\n    done: true,\r\n  },\r\n  {\r\n    id: 4,\r\n    text: \"Go to grocery shopping\",\r\n    done: false,\r\n  },\r\n];\r\n\r\n// 세가지 액션을 만들건데,\r\n// CREATE\r\n// TOGGLE - 켰다껐다하는 액션\r\n// REMOVE\r\nfunction todoReducer(state, action) {\r\n  // useReducer에서 사용할 함수 - state와 action을 가져와서 다음 상태를 리턴해주는 함수.\r\n\r\n  switch (action.type) {\r\n    case \"CREATE\":\r\n      return state.concat(action.todo); // action에 todo항목을 넣어서 나중에 dispatch해줄것임.\r\n    case \"TOGGLE\":\r\n      return state.map(\r\n        //state.map을 해서 모든 todo에 대하여 변환을 해줄건데,\r\n        // 만약에 todo.id === action.id 이러면 todo를 업데이트 해줄거다. done값을 기존값의 반대되는걸 넣어주는거. done: !todo.done\r\n        (todo) => (todo.id === action.id ? { ...todo, done: !todo.done } : todo)\r\n      );\r\n    case \"REMOVE\": // todo 모든 항목들에 대하여 todo.id !== action.id 이렇게 일치하지 않는 애들만 가져오겠다는 거.\r\n      return state.filter((todo) => todo.id !== action.id);\r\n\r\n    default:\r\n      throw new Error(`Unhandled action type : ${action.type}`);\r\n  }\r\n}\r\n\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n\r\nexport function TodoProvider({ children }) {\r\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n  const nextId = useRef(5);\r\n\r\n  return (\r\n    <TodoStateContext.Provider value={state}>\r\n      <TodoDispatchContext.Provider value={dispatch}>\r\n        <TodoNextIdContext.Provider value={nextId}>\r\n          {children}\r\n        </TodoNextIdContext.Provider>\r\n      </TodoDispatchContext.Provider>\r\n    </TodoStateContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useTodoState() {\r\n  const context = useContext(TodoStateContext);\r\n  if (!context) {\r\n    throw new Error(\"Cannot find TodoProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useTodoDispatch() {\r\n  const context = useContext(TodoDispatchContext);\r\n  if (!context) {\r\n    throw new Error(\"Cannot find TodoProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useTodoNextId() {\r\n  const context = useContext(TodoNextIdContext);\r\n  if (!context) {\r\n    throw new Error(\"Cannot find TodoProvider\");\r\n  }\r\n  return context;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { MdAdd } from \"react-icons/md\";\r\nimport { useTodoDispatch, useTodoNextId } from \"../TodoContext\";\r\n\r\nconst CircleButton = styled.button`\r\n  background: #38d9d9;\r\n  &:hover {\r\n    background: #63e6be;\r\n  }\r\n  &:active {\r\n    background: #20c997;\r\n  }\r\n\r\n  z-index: 5;\r\n  cursor: pointer;\r\n  width: 80px;\r\n  height: 80px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 0px;\r\n  transform: translate(-50%, 50%);\r\n  // transform : 버튼이 좀더 정확한 위치를 찾아가게하기 위해서\r\n\r\n  font-size: 60px;\r\n  color: white;\r\n  border-radius: 40px;\r\n\r\n  border: none;\r\n  outline: none;\r\n\r\n  transition: 0.125s all ease-in;\r\n\r\n  ${(props) =>\r\n    props.open &&\r\n    css`\r\n      background: #ff6b6b;\r\n      &:hover {\r\n        background: #ff8787;\r\n      }\r\n      &:active {\r\n        background: #fa5252;\r\n      }\r\n      transform: translate(-50%, 50%) rotate(45deg);\r\n    `}\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n  width: 100%;\r\n  bottom: 0;\r\n  left: 0;\r\n  position: absolute;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n  background: #f8f9fa;\r\n  padding: 32px;\r\n  padding-bottom: 72px;\r\n  border-bottom-left-radius: 16px;\r\n  border-bottom-right-radius: 16px;\r\n  border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px;\r\n  border-radius: 4px;\r\n  border: 1px solid #dee2e6;\r\n  width: 100%;\r\n  outline: none;\r\n  font-size: 18px;\r\n  box-sizing: border-box; // 이걸 설정 안하면 패딩을 설정했을때 오른쪽이 삐져나오게 된다.\r\n`;\r\n\r\nfunction TodoCreate() {\r\n  const [open, setOpen] = useState(false);\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const onToggle = () => setOpen(!open);\r\n  const onChange = (e) => setValue(e.target.value);\r\n\r\n  const dispatch = useTodoDispatch();\r\n  const nextId = useTodoNextId();\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch({\r\n      type: \"CREATE\",\r\n      todo: {\r\n        id: nextId.current,\r\n        text: value,\r\n        done: false,\r\n      },\r\n    });\r\n    setValue(\"\");\r\n    setOpen(false);\r\n    nextId.current += 1;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {open && (\r\n        <InsertFormPositioner>\r\n          <InsertForm onSubmit={onSubmit}>\r\n            <Input\r\n              placeholder=\"Type what you need to do and press Enter\"\r\n              autoFocus\r\n              onChange={onChange}\r\n              value={value}\r\n            />\r\n          </InsertForm>\r\n        </InsertFormPositioner>\r\n      )}\r\n      <CircleButton onClick={onToggle} open={open}>\r\n        <MdAdd />\r\n      </CircleButton>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default React.memo(TodoCreate);\r\n//React.memo로 감싸면 불필요한 렌더링을 막아준다.\r\n","import styled from \"styled-components\";\r\nimport { useTodoState } from \"../TodoContext\";\r\n\r\nconst TodoHeadBlock = styled.div`\r\n  padding-top: 48px;\r\n  padding-left: 32px;\r\n  padding-right: 32px;\r\n  padding-bottom: 24px;\r\n  border-bottom: 1px solid #e9ecef;\r\n\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 36px;\r\n    color: #343a40;\r\n  }\r\n\r\n  .day {\r\n    margin-top: 4px;\r\n    color: #868e96;\r\n    font-size: 21px;\r\n  }\r\n\r\n  .tasks-left {\r\n    color: #20c997;\r\n    font-size: 18px;\r\n    margin-top: 40px;\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nfunction TodoHead() {\r\n  const todos = useTodoState();\r\n  const undoneTasks = todos.filter((todo) => !todo.done);\r\n\r\n  const today = new Date();\r\n  const dateString = today.toLocaleDateString(\"en-UK\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  });\r\n\r\n  const dayName = today.toLocaleDateString(\"en-UK\", {\r\n    weekday: \"long\",\r\n  });\r\n\r\n  return (\r\n    <TodoHeadBlock>\r\n      <h1>{dateString}</h1>\r\n      <div className=\"day\">{dayName}</div>\r\n      <div className=\"tasks-left\">{undoneTasks.length} more to finish</div>\r\n    </TodoHeadBlock>\r\n  );\r\n}\r\n\r\nexport default TodoHead;\r\n","import styled, { css } from \"styled-components\";\r\nimport { MdDone, MdDelete } from \"react-icons/md\";\r\nimport { useTodoDispatch } from \"../TodoContext\";\r\nimport React from \"react\";\r\n\r\nconst CheckCircle = styled.div`\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 50%;\r\n  border: 1px solid #ced4da;\r\n  font-size: 24px; // 아이콘크기\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center; // 체크동그라미 아이콘이 동그라미 중앙에 오게끔\r\n  margin-right: 20px;\r\n  cursor: pointer;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      border: 1px solid #38d9a9;\r\n      color: #38d9a9;\r\n    `}\r\n`;\r\n\r\nconst Text = styled.div`\r\n  flex: 1;\r\n  font-size: 21px;\r\n  color: #495057;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      color: #ced4da;\r\n    `}\r\n`;\r\n\r\nconst Remove = styled.div`\r\n  opacity: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #dee2e6;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: #ff6b6b;\r\n  }\r\n`;\r\n\r\nconst TodoItemBlock = styled.div`\r\n  display: flex;\r\n  align-items: center; // 세로로 정렬\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n\r\n  &:hover {\r\n    ${Remove} {\r\n      // 위에 만든 Remove를 특정상황에만 쓰고싶으면 이렇게 안에 넣어서 써도됨.\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nfunction TodoItem({ id, done, text }) {\r\n  const dispatch = useTodoDispatch();\r\n  const onToggle = () =>\r\n    dispatch({\r\n      type: \"TOGGLE\",\r\n      id,\r\n    });\r\n  const onRemove = () =>\r\n    dispatch({\r\n      type: \"REMOVE\",\r\n      id,\r\n    });\r\n\r\n  return (\r\n    <TodoItemBlock>\r\n      <CheckCircle done={done} onClick={onToggle}>\r\n        {done && <MdDone />}\r\n      </CheckCircle>\r\n      <Text done={done}>{text}</Text>\r\n      <Remove onClick={onRemove}>\r\n        <MdDelete />\r\n      </Remove>\r\n    </TodoItemBlock>\r\n  );\r\n}\r\n\r\nexport default React.memo(TodoItem);\r\n","import styled from \"styled-components\";\r\nimport { useTodoState } from \"../TodoContext\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst TodoListBlock = styled.div`\r\n  flex: 1;\r\n  padding: 20px 32px;\r\n  padding-bottom: 48px;\r\n  overflow-y: auto;\r\n`;\r\n\r\nfunction TodoList() {\r\n  const todos = useTodoState();\r\n  console.log(todos);\r\n  return (\r\n    <>\r\n      <TodoListBlock>\r\n        {todos.map((todo) => (\r\n          <TodoItem\r\n            key={todo.id}\r\n            id={todo.id}\r\n            text={todo.text}\r\n            done={todo.done}\r\n          />\r\n        ))}\r\n\r\n        {/* <TodoItem text=\"test\" done={true} />\r\n        <TodoItem text=\"test2\" done={true} />\r\n        <TodoItem text=\"test3\" done={false} />\r\n        <TodoItem text=\"test4\" done={false} /> */}\r\n      </TodoListBlock>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import styled from \"styled-components\";\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n  width: 568px;\r\n  height: 720px;\r\n\r\n  position: relative;\r\n  background: white;\r\n  border-radius: 16px;\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.04);\r\n\r\n  margin: 0 auto;\r\n  margin-top: 96px;\r\n  margin-bottom: 32px;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nfunction TodoTemplate({ children }) {\r\n  return (\r\n    <>\r\n      <TodoTemplateBlock>{children}</TodoTemplateBlock>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoTemplate;\r\n","import { createGlobalStyle } from \"styled-components\";\nimport TodoCreate from \"./components/TodoCreate\";\nimport TodoHead from \"./components/TodoHead\";\nimport TodoList from \"./components/TodoList\";\nimport TodoTemplate from \"./components/TodoTemplate\";\nimport { TodoProvider } from \"./TodoContext\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background : #e9ecef;\n  }\n`;\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle />\n      <TodoTemplate>\n        <TodoHead />\n        <TodoList />\n        <TodoCreate />\n      </TodoTemplate>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}